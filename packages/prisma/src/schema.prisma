generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["clientExtensions"]
}

datasource db {
    provider = "postgresql"
    url      = env("PRISMA_DATABASE_URL")
}

model Artwork {
    id                  String             @id @default(cuid())
    name                String
    slug                String             @unique
    description         String
    createdAt           DateTime           @default(now())
    updatedAt           DateTime           @updatedAt
    madeAt              DateTime?
    showInGallery       Boolean            @default(false)
    showInPortfolio     Boolean            @default(false)
    filename            String
    watermarkedFilename String?
    designState         String?
    Artwork_Categories  Artwork_Category[]
    products            Product[]

    @@map("artworks")
}

model Artwork_Category {
    artwork_id  String
    category_id String
    artwork     Artwork  @relation(fields: [artwork_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@id([artwork_id, category_id])
    @@map("artworks_categories")
}

model Category {
    id                 String             @id @default(cuid())
    name               String
    slug               String             @unique
    description        String?
    disposition        Int
    color              String
    updatedAt          DateTime           @updatedAt
    showInGallery      Boolean            @default(false)
    Artwork_Categories Artwork_Category[]

    @@map("categories")
}

model ShopCategory {
    id               String         @id @default(cuid())
    updatedAt        DateTime       @updatedAt
    name             String
    slug             String
    disposition      Int
    parentCategoryId String?
    products         Product[]
    parentCategory   ShopCategory?  @relation("shopCatSelfRelation", fields: [parentCategoryId], references: [id])
    subCategories    ShopCategory[] @relation("shopCatSelfRelation")

    @@map("shop_categories")
}

model Product {
    id             String         @id @default(cuid())
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
    name           String
    slug           String         @unique
    description    String
    height         Int?
    width          Int?
    stock          Int
    price          Int
    forSale        Boolean        @default(false)
    artworkId      String
    shopCategoryId String?
    artwork        Artwork        @relation(fields: [artworkId], references: [id], onDelete: Cascade)
    shopCategory   ShopCategory?  @relation(fields: [shopCategoryId], references: [id], onDelete: SetNull)
    productImage   ProductImage[]

    @@map("products")
}

model ProductImage {
    id                  String  @id @default(cuid())
    showInGallery       Boolean @default(false)
    filename            String
    watermarkedFilename String?
    designState         String?
    productId           String
    product             Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@map("product_images")
}

model Purchase {
    id             String          @id @default(uuid())
    stripeId       String
    purchaseAt     DateTime        @default(now())
    message        String?
    status         PURCHASE_STATUS
    trackingNumber String
    email          String
    weightCost     Int
    insuranceCost  Int
    addresses      Address[]
    purchaseItems  PurchaseItem[]

    @@map("purchases")
}

enum PURCHASE_STATUS {
    WAITING_FOR_PAYMENT
    IN_PREPARATION
    DELIVERING
    DELIVERED
    CANCELED
    REFUNDED

    @@map("purchases_statuses")
}

model PurchaseItem {
    id         String   @id @default(cuid())
    name       String
    quantity   Int
    price      Int
    purchaseId String
    purchase   Purchase @relation(fields: [purchaseId], references: [id])

    @@map("purchase_items")
}

model Address {
    id           String       @id @default(cuid())
    type         ADDRESS_TYPE
    fullname     String
    addressLine1 String
    addressLine2 String?
    postalCode   String
    city         String
    country      String
    phone        String?
    purchaseId   String
    purchase     Purchase     @relation(fields: [purchaseId], references: [id])

    @@map("addresses")
}

enum ADDRESS_TYPE {
    SINGLE
    DELIVERY
    BILLING

    @@map("address_types")
}

model ShippingCost {
    id            String @id @default(cuid())
    max           Int
    weightCost    Int
    insuranceCost Int

    @@map("shipping_cost")
}

model AdminVariable {
    id    VAR_KEY      @id
    type  VAR_KEY_TYPE
    slug  String       @unique
    title String
    value String

    @@map("admin_variables")
}

enum VAR_KEY {
    CGV
    TEST

    @@map("var_keys")
}

enum VAR_KEY_TYPE {
    HTML
    STRING
    INT
    FLOAT

    @@map("var_key_types")
}

model ModelMutation {
    id           String @id @default(cuid())
    model        String
    action       Action
    previousData Json
    currentData  Json
    // user
}

enum Action {
    EDIT
    CREATE
    DELETE
}

model User {
    id       String @id @default(cuid())
    email    String @unique
    password String
    name     String

    @@map("users")
}
